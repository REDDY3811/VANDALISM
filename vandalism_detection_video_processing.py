# -*- coding: utf-8 -*-
"""Vandalism_detection_video-processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/149M_P6mxopGhBy4ih7NqACaJ8HZmf4iY
"""
#preprocessing with video data
#video Processing
import cv2
import numpy as np

def load_video(video_path, frames_per_clip):
    cap = cv2.VideoCapture(video_path)
    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))


    frames = []

    while True:
        ret, frame = cap.read()
        if not ret:
            break


        frame = cv2.resize(frame, (224, 224))

        # Performing normalization
        frame = frame / 255.0  # Normalizing pixel values to [0, 1]

        frames.append(frame)

    cap.release()

    # Dividing frames into clips
    clips = []
    for i in range(0, len(frames), frames_per_clip):
        clip = frames[i:i+frames_per_clip]
        if len(clip) == frames_per_clip:
            clips.append(clip)

    return clips

def preprocess_video_data(video_paths, frames_per_clip):
    processed_data = []

    for video_path in video_paths:
        clips = load_video(video_path, frames_per_clip)
        processed_data.extend(clips)

    return np.array(processed_data)

video_paths = ["C:\Users\PANDU REDDY\Downloads\Video\ULTIMATE Mirror and Window Smashing Compilation - RoadRage.mp4"]
frames_per_clip = 16  # Number of frames per video clip
processed_data = preprocess_video_data(video_paths, frames_per_clip)

import numpy as np
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split

# Assuming processed video data (processed_data) and labels (0 for no vandalism, 1 for vandalism)

labels = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]

# Spliting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(processed_data, labels, test_size=0.2, random_state=42)

# Defining neural network model
model = keras.Sequential([
    keras.layers.Conv3D(64, (3, 3, 3), activation='relu', input_shape=(frames_per_clip, height, width, channels)),
    keras.layers.MaxPooling3D((2, 2, 2)),
    keras.layers.Conv3D(128, (3, 3, 3), activation='relu'),
    keras.layers.MaxPooling3D((2, 2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')  # Output layer with sigmoid activation for binary classification
])

# Compiling the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',  # Binary cross-entropy for binary classification
              metrics=['accuracy'])

# Training our dataset to the model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Evaluating the model on the test set
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f'Test accuracy: {test_accuracy}')

# Making predictions on new data
predictions = model.predict(X_test)

# The 'predictions' variable contains the model's output (0 or 1) indicating vandalism detection.